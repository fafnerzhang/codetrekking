version: '3.7'

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ${ROOT}/storage/airflow_postgres:/var/lib/postgresql/data
    networks:
      - codetrekking
    deploy:
      mode: global
      endpoint_mode: dnsrr
      placement:
        constraints:
        - node.role==manager
      resources:
        limits:
          memory: 4G
      restart_policy:
        condition: on-failure
  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    deploy:
      mode: global
      endpoint_mode: dnsrr
      placement:
        constraints:
        - node.role==manager
      resources:
        limits:
          memory: 4G
      restart_policy:
        condition: on-failure
    networks:
      - codetrekking
      
  airflow-webserver:
    image: apache/airflow:${AIRFLOW_VERSION}
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    depends_on:
      - postgres
      - redis
      - airflow-init
    ports:
      - "8080:8080"
    command: webserver
    deploy:
      mode: global
      endpoint_mode: dnsrr
      placement:
        constraints:
        - node.role==worker
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    volumes:
      - ${AIRFLOW_PROJ_DIR}/dags:/opt/airflow/dags
      - ${AIRFLOW_PROJ_DIR}/logs:/opt/airflow/logs
      - ${AIRFLOW_PROJ_DIR}/config:/opt/airflow/config
      - ${AIRFLOW_PROJ_DIR}/plugins:/opt/airflow/plugins
    networks:
      - codetrekking
      
  airflow-scheduler:
    image: apache/airflow:${AIRFLOW_VERSION}
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
      - airflow-init
    command: scheduler
    deploy:
      mode: global
      endpoint_mode: dnsrr
      placement:
        constraints:
        - node.role==worker
      restart_policy:
        condition: on-failure
    volumes:
      - ${AIRFLOW_PROJ_DIR}/dags:/opt/airflow/dags
      - ${AIRFLOW_PROJ_DIR}/logs:/opt/airflow/logs
      - ${AIRFLOW_PROJ_DIR}/config:/opt/airflow/config
      - ${AIRFLOW_PROJ_DIR}/plugins:/opt/airflow/plugins
    networks:
      - codetrekking
      
  airflow-worker:
    image: apache/airflow:${AIRFLOW_VERSION}
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
      - airflow-init
    command: celery worker
    deploy:
      mode: global
      endpoint_mode: dnsrr
      placement:
        constraints:
        - node.role==worker
      restart_policy:
        condition: on-failure
    volumes:
      - ${AIRFLOW_PROJ_DIR}/dags:/opt/airflow/dags
      - ${AIRFLOW_PROJ_DIR}/logs:/opt/airflow/logs
      - ${AIRFLOW_PROJ_DIR}/config:/opt/airflow/config
      - ${AIRFLOW_PROJ_DIR}/plugins:/opt/airflow/plugins
    networks:
      - codetrekking
      
  airflow-triggerer:
    image: apache/airflow:${AIRFLOW_VERSION}
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
      - airflow-init
    command: triggerer
    deploy:
      mode: global
      endpoint_mode: dnsrr
      placement:
        constraints:
        - node.role==worker
      restart_policy:
        condition: on-failure
    volumes:
      - ${AIRFLOW_PROJ_DIR}/dags:/opt/airflow/dags
      - ${AIRFLOW_PROJ_DIR}/logs:/opt/airflow/logs
      - ${AIRFLOW_PROJ_DIR}/config:/opt/airflow/config
      - ${AIRFLOW_PROJ_DIR}/plugins:/opt/airflow/plugins
    networks:
      - codetrekking
      
  airflow-init:
    image: apache/airflow:${AIRFLOW_VERSION}
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    deploy:
      mode: global
      endpoint_mode: dnsrr
      placement:
        constraints:
        - node.role==worker
      restart_policy:
        condition: none
    command: bash -c "airflow db init && airflow users create -u admin -p admin -f Admin -l User -r Admin -e admin@example.com"
    volumes:
      - ${AIRFLOW_PROJ_DIR}/dags:/opt/airflow/dags
      - ${AIRFLOW_PROJ_DIR}/logs:/opt/airflow/logs
      - ${AIRFLOW_PROJ_DIR}/config:/opt/airflow/config
      - ${AIRFLOW_PROJ_DIR}/plugins:/opt/airflow/plugins
    networks:
      - codetrekking

  airflow-cli:
    image: apache/airflow:${AIRFLOW_VERSION}
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - CONNECTION_CHECK_MAX_COUNT="0"
    depends_on:
      - postgres
      - redis
    command:
      - bash
      - -c
      - airflow
    deploy:
      mode: global
      endpoint_mode: dnsrr
      placement:
        constraints:
        - node.role==worker
      restart_policy:
        condition: on-failure
    volumes:
      - ${AIRFLOW_PROJ_DIR}/dags:/opt/airflow/dags
      - ${AIRFLOW_PROJ_DIR}/logs:/opt/airflow/logs
      - ${AIRFLOW_PROJ_DIR}/config:/opt/airflow/config
      - ${AIRFLOW_PROJ_DIR}/plugins:/opt/airflow/plugins
    networks:
      - codetrekking

networks:
  codetrekking:
    driver: overlay
    attachable: true