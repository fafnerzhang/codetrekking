version: '3.8'

x-airflow-common:
  &airflow-common
  image: ${REGISTRY_URL}/peakairflow:${AIRFLOW_VERSION:-3.0.2}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_USER:-airflow}:${AIRFLOW_POSTGRES_PASSWORD:-airflow}@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_USER:-airflow}:${AIRFLOW_POSTGRES_PASSWORD:-airflow}@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__API_AUTH__JWT_SECRET: 'GqwxEaExM32tnZg5TrPvNr2B2PFIgOKi8gRyN-J_OEg'
    _PIP_ADDITIONAL_REQUIREMENTS: ''
    PYTHONPATH: /opt/peakflow
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
    AIRFLOW_UID: "${AIRFLOW_UID:-50000}"
  volumes:
    - ${AIRFLOW_PROJ_DIR}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR}/plugins:/opt/airflow/plugins
    - ${ROOT}/application/peakflow:/opt/peakflow:rw
    - ${ROOT}/storage/garmin:/opt/garmin:rw
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    - redis
    - postgres

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${AIRFLOW_USER:-airflow}
      POSTGRES_PASSWORD: ${AIRFLOW_POSTGRES_PASSWORD:-airflow}
      POSTGRES_DB: airflow
    volumes:
      - ${ROOT}/storage/airflow_postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${AIRFLOW_USER:-airflow}"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - codetrekking
    deploy:
      mode: global
      endpoint_mode: dnsrr
      placement:
        constraints:
        - node.role==${AIRFLOW_DEPLOY_NODE_ROLE:-worker}
      resources:
        limits:
          memory: 4G
      restart_policy:
        condition: on-failure
  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - codetrekking
    deploy:
      mode: global
      endpoint_mode: dnsrr
      placement:
        constraints:
        - node.role==${AIRFLOW_DEPLOY_NODE_ROLE:-worker}
      resources:
        limits:
          memory: 4G
      restart_policy:
        condition: on-failure
      
  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      - redis
      - postgres
      - airflow-init
    networks:
      - codetrekking
    deploy:
      mode: global
      placement:
        constraints:
        - node.role==${AIRFLOW_DEPLOY_NODE_ROLE:-worker}
      restart_policy:
        condition: on-failure
      
  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      - redis
      - postgres
      - airflow-init
    networks:
      - codetrekking
    deploy:
      mode: global
      placement:
        constraints:
        - node.role==${AIRFLOW_DEPLOY_NODE_ROLE:-worker}
      restart_policy:
        condition: on-failure

      
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      - redis
      - postgres
      - airflow-init
    networks:
      - codetrekking
    deploy:
      mode: global
      endpoint_mode: dnsrr
      placement:
        constraints:
        - node.role==${AIRFLOW_DEPLOY_NODE_ROLE:-worker}
      restart_policy:
        condition: on-failure
      
  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      - redis
      - postgres
      - airflow-init
    networks:
      - codetrekking
    deploy:
      mode: global
      endpoint_mode: dnsrr
      placement:
        constraints:
        - node.role==${AIRFLOW_DEPLOY_NODE_ROLE:-worker}
      restart_policy:
        condition: on-failure
      
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
      PYTHONPATH: /opt/peakflow
      PIP_NO_CACHE_DIR: "off"
    restart: always
    depends_on:
      - redis
      - postgres
      - airflow-apiserver
      - airflow-init
    networks:
      - codetrekking
    deploy:
      mode: global
      endpoint_mode: dnsrr
      placement:
        constraints:
        - node.role==${AIRFLOW_DEPLOY_NODE_ROLE:-worker}
      restart_policy:
        condition: on-failure
      
  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      - redis
      - postgres
      - airflow-init
    networks:
      - codetrekking
    deploy:
      mode: global
      endpoint_mode: dnsrr
      placement:
        constraints:
        - node.role==${AIRFLOW_DEPLOY_NODE_ROLE:-worker}
      restart_policy:
        condition: on-failure
      
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "$${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo "Creating missing opt dirs if missing:"
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo "Airflow version:"
        /entrypoint airflow version
        echo "Files in shared volumes:"
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo "Running airflow config list to create default config file if missing."
        /entrypoint airflow config list >/dev/null
        echo "Change ownership of files in /opt/airflow to $${AIRFLOW_UID:-50000}:0"
        chown -R "$${AIRFLOW_UID:-50000}:0" /opt/airflow/
        echo "Change ownership of files in shared volumes to $${AIRFLOW_UID:-50000}:0"
        chown -v -R "$${AIRFLOW_UID:-50000}:0" /opt/airflow/{logs,dags,plugins,config}
        echo "Files in shared volumes:"
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo "Initializing database..."
        /entrypoint airflow db init
        echo "Creating admin user..."
        /entrypoint airflow users create \
          --username $${AIRFLOW_USER:-airflow} \
          --password $${AIRFLOW_PASSWORD:-airflow} \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email $${AIRFLOW_EMAIL:-admin@example.com}
        echo "Initialization complete!"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_USER:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    depends_on:
      - postgres
      - redis
    volumes:
      - ${AIRFLOW_PROJ_DIR}/dags:/opt/airflow/dags:rw
      - ${AIRFLOW_PROJ_DIR}/logs:/opt/airflow/logs:rw
      - ${AIRFLOW_PROJ_DIR}/config:/opt/airflow/config:rw
      - ${AIRFLOW_PROJ_DIR}/plugins:/opt/airflow/plugins:rw
      - ${ROOT}/application/peakflow:/opt/peakflow:rw
      - ${ROOT}/storage/garmin:/opt/garmin:rw
    networks:
      - codetrekking
    deploy:
      mode: global
      endpoint_mode: dnsrr
      placement:
        constraints:
        - node.role==${AIRFLOW_DEPLOY_NODE_ROLE:-worker}
      restart_policy:
        condition: none

  airflow-cli:
    <<: *airflow-common
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    depends_on:
      - redis
      - postgres
    networks:
      - codetrekking
    deploy:
      mode: global
      endpoint_mode: dnsrr
      placement:
        constraints:
        - node.role==${AIRFLOW_DEPLOY_NODE_ROLE:-worker}
      restart_policy:
        condition: none

networks:
  codetrekking:
    external: true
    name: codetrekking